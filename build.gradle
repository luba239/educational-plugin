buildscript {
    ext.pythonPluginVersion = pythonPluginVersion
    ext.pycharmSandbox = project.buildDir.absolutePath + File.separator + "pycharm-sandbox"
    ext.studioSandbox = project.buildDir.absolutePath + File.separator + "studio-sandbox"
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.1.51"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.16" apply false
    id "java"
    id "idea"
    id "de.undercouch.download" version "3.2.0"
}


group = 'org.jetbrains.edu'
def buildNumber = System.getenv("BUILD_NUMBER")
version = "$pluginVersion-${buildNumber == null ? "SNAPSHOT" : buildNumber}"

import de.undercouch.gradle.tasks.download.Download


task downloadJavaFx(type: Download) {
    overwrite true
    src javafx
    dest "${project.buildDir}/javafx.zip"
}

task prepareJavaFx(type: Copy) {
    def javafxFile = file("${project.buildDir}/javafx.zip")
    onlyIf { javafxFile.exists() }
    from zipTree(javafxFile)
    into file("${project.buildDir}/javafx")
}

prepareJavaFx.dependsOn downloadJavaFx

allprojects {
    apply plugin: "org.jetbrains.intellij"
    apply plugin: "java"
    apply plugin: "kotlin"


    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    intellij {
        if (project.hasProperty("ideaVersion")) {
            version ideaVersion
        } else if (project.hasProperty("ideaPath")) {
            localPath ideaPath
        }
    }

    compileKotlin {
        // see https://youtrack.jetbrains.com/issue/KT-19737
        destinationDir = compileJava.destinationDir
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    dependencies {
        compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.1'
        compileOnly fileTree(dir: "${rootProject.buildDir}/javafx/jre/lib/ext")
    }
}


intellij {
    if (project.hasProperty("ideaVersion")) {
        version ideaVersion
    } else if (project.hasProperty("ideaPath")) {
        localPath ideaPath
    }
    if (project.hasProperty("customSinceBuild")) {
        patchPluginXml.sinceBuild = customSinceBuild
    }
    pluginName 'EduTools'
    updateSinceUntilBuild true
    downloadSources false
    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion", 'android'
}

task configurePyCharm {
    doLast {
        if (!project.hasProperty("pycharmPath")) {
            throw new InvalidUserDataException("Path to PyCharm installed locally is needed\nDefine \"pycharmPath\" property")
        }
        intellij.sandboxDirectory pycharmSandbox
        intellij.alternativeIdePath pycharmPath
    }
}

task configureAndroidStudio {
    doLast {
        if (!project.hasProperty("androidStudioPath")) {
            throw new InvalidUserDataException("Path to Android Studio installed locally is needed\nDefine \"androidStudioPath\" property")
        }
        intellij.sandboxDirectory studioSandbox
        intellij.alternativeIdePath androidStudioPath
    }
}

task copyXmls(type: Copy) {
    def resultingMetaInf = "${sourceSets.main.output.resourcesDir}/META-INF"

    for (def subProject : project.subprojects) {
        from "${subProject.name}/resources/META-INF"
        into resultingMetaInf
        include "*.xml"
    }
}

jar.dependsOn(copyXmls)

task removePyCharm(type: Delete) {
    doLast {
        file(pycharmSandbox + File.separator + "plugins" + File.separator + "python-ce").deleteDir()
    }
}

// we need this so as not to install python plugin on PyCharm
prepareSandbox.finalizedBy(removePyCharm)

subprojects {
    sourceSets {
        main {
            java.srcDirs 'src'
            resources.srcDirs 'resources'
            kotlin.srcDirs 'src'
        }

        test {
            java.srcDirs 'testSrc'
            resources.srcDirs 'resources', 'testResources'

        }
    }

    project.tasks.getByPath("runIde").enabled false
    project.tasks.getByPath("prepareSandbox").enabled false
}

sourceSets {
    main {
        resources.srcDirs 'resources'
    }
}

configure(project(':educational-core')) {

    task downloadColorFile(type: Download) {
        overwrite false
        src 'https://raw.githubusercontent.com/ozh/github-colors/master/colors.json'
        dest "${projectDir}/resources/languageColors/colors.json"
    }
}

configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin')]) {
    dependencies {
        compile project(':educational-core')
    }
}

configure([project(':educational-core'), project(':Edu-Java')]) {
    intellij.plugins 'junit', 'android'
}

configure(project(':Edu-Kotlin')) {
    intellij.plugins 'junit', 'Kotlin'


    task createTwitterProperties() {
        def twitterFile = file("${projectDir}/resources/twitter/kotlin_koans/oauth_twitter.properties")
        Properties props = new Properties()
        props.setProperty("consumerKey", consumerKey)
        props.setProperty("consumerSecret", consumerSecret)
        props.store(twitterFile.newWriter(), null)
    }
    processResources.dependsOn(createTwitterProperties)
}

configure(project(':Edu-Python')) {
    intellij.plugins "PythonCore:$pythonPluginVersion"
}

configure(project(':Edu-Android')) {
    intellij.plugins 'android'

    dependencies {
        compile project(':Edu-Kotlin')
    }
}

runIde.systemProperty("-Didea.is.internal", "true")
runIde.systemProperty("-ea", "")

dependencies {
    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java'), project(':Edu-Android')
}

idea {
    project {
        jdkName = 1.8
        languageLevel = 1.8
        vcs = 'Git'
    }
}
